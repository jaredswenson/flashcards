{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["FlashCard","letter","numbers","className","style","backgroundImage","backgroundPosition","backgroundRepeat","toUpperCase","toLowerCase","App","alphabet","useState","doNumbers","setDoNumbers","index","setIndex","eventName","handler","element","window","savedHandler","useRef","useEffect","current","addEventListener","eventListener","event","removeEventListener","useEventListener","key","icon","faSync","marginTop","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0OAuCA,IAAMA,EAAY,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3B,OACE,qBACEC,UAAU,oBACVC,MAAO,CACLC,iBAAkBH,GAAD,wBAA6BD,EAA7B,SACjBK,mBAAoB,SACpBC,iBAAkB,aALtB,SAQE,mBAAGJ,UAAU,WAAb,SACGD,EAAUD,EAAH,UAAeA,EAAOO,eAAtB,OAAsCP,EAAOQ,oBAmD9CC,MA7Cf,WACE,IAAIC,EAAW,6BACXT,EAAU,aAFD,EAGqBU,oBAAS,GAH9B,mBAGNC,EAHM,KAGKC,EAHL,OAIaF,mBAAS,GAJtB,mBAING,EAJM,KAICC,EAJD,KAyBb,OA5EF,SAA0BC,EAAWC,GAA4B,IAAnBC,EAAkB,uDAARC,OAEhDC,EAAeC,mBAMrBC,qBAAU,WACRF,EAAaG,QAAUN,IACtB,CAACA,IAEJK,qBACE,WAIE,GADoBJ,GAAWA,EAAQM,iBACvC,CAGA,IAAMC,EAAgB,SAACC,GAAD,OAAWN,EAAaG,QAAQG,IAMtD,OAHAR,EAAQM,iBAAiBR,EAAWS,GAG7B,WACLP,EAAQS,oBAAoBX,EAAWS,OAG3C,CAACT,EAAWE,IAuCdU,CAAiB,UAAWhB,EAN5B,YAA6B,EAAPiB,MACR5B,EAAQa,IACNC,EAAZD,EAAQ,EAAaA,EAAQ,EAAc,IAR/C,YAA4B,EAAPe,MACPnB,EAASI,IACNC,EAAbD,EAAQ,GAAcA,EAAQ,EAAc,KAkB9C,qBAAKZ,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,cAAC,EAAD,CACED,QAASW,EACTZ,OAAQY,EAAYX,EAAQa,GAASJ,EAASI,KAEhD,cAAC,IAAD,CACEgB,KAAMC,IACN5B,MAAO,CAAE6B,UAAW,IACpBC,QAAS,kBAAMlB,EAAS,MAE1B,wBAAQkB,QAAS,kBAhBrBlB,EAAS,QACTF,GAAcD,IAe2BV,UAAU,gBAA/C,SACGU,EAAY,UAAY,kBClFpBsB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a9518f15.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faSync } from \"@fortawesome/free-solid-svg-icons\";\n\nimport \"./App.css\";\nfunction useEventListener(eventName, handler, element = window) {\n  // Create a ref that stores handler\n  const savedHandler = useRef();\n\n  // Update ref.current value if handler changes.\n  // This allows our effect below to always get latest handler ...\n  // ... without us needing to pass it in effect deps array ...\n  // ... and potentially cause effect to re-run every render.\n  useEffect(() => {\n    savedHandler.current = handler;\n  }, [handler]);\n\n  useEffect(\n    () => {\n      // Make sure element supports addEventListener\n      // On\n      const isSupported = element && element.addEventListener;\n      if (!isSupported) return;\n\n      // Create event listener that calls handler function stored in ref\n      const eventListener = (event) => savedHandler.current(event);\n\n      // Add event listener\n      element.addEventListener(eventName, eventListener);\n\n      // Remove event listener on cleanup\n      return () => {\n        element.removeEventListener(eventName, eventListener);\n      };\n    },\n    [eventName, element] // Re-run if eventName or element changes\n  );\n}\n\nconst FlashCard = ({ letter, numbers }) => {\n  return (\n    <div\n      className=\"flashcard-wrapper\"\n      style={{\n        backgroundImage: !numbers && `url(../images/${letter}.png)`,\n        backgroundPosition: \"center\",\n        backgroundRepeat: \"no-repeat\",\n      }}\n    >\n      <p className=\"App-link\">\n        {numbers ? letter : `${letter.toUpperCase()}${letter.toLowerCase()}`}\n      </p>\n    </div>\n  );\n};\n\nfunction App() {\n  let alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n  let numbers = \"1234567890\";\n  const [doNumbers, setDoNumbers] = useState(false);\n  const [index, setIndex] = useState(0);\n\n  function abcHander({ key }) {\n    if (key === alphabet[index]) {\n      index < 25 ? setIndex(index + 1) : setIndex(0);\n    }\n  }\n\n  function numHandler({ key }) {\n    if (key === numbers[index]) {\n      index < 9 ? setIndex(index + 1) : setIndex(0);\n    }\n  }\n\n  useEventListener(\"keydown\", doNumbers ? numHandler : abcHander);\n\n  const toggleType = () => {\n    setIndex(0);\n    setDoNumbers(!doNumbers);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <FlashCard\n          numbers={doNumbers}\n          letter={doNumbers ? numbers[index] : alphabet[index]}\n        />\n        <FontAwesomeIcon\n          icon={faSync}\n          style={{ marginTop: 10 }}\n          onClick={() => setIndex(0)}\n        />\n        <button onClick={() => toggleType()} className=\"toggle-button\">\n          {doNumbers ? \"Letters\" : \"Numbers\"}\n        </button>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}